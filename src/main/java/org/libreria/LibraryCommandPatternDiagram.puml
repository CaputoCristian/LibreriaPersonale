@startuml
skinparam classAttributeIconSize 0
skinparam backgroundColor white
skinparam roundcorner 5

skinparam class {
    BackgroundColor white
    ArrowColor black
    BorderColor black
}

package org.libreria {
    package model {
        abstract class AbstractBook {
            # title: String
            # author: String
            # isbn: String
            # genre: String
            # rating: Integer
            # readingStatus: String
            + <<Create>> AbstractBook()
            + <<Create>> AbstractBook(title: String, author: String, isbn: String, genre: String, rating: int, readingStatus: String)
            + getTitle(): String
            + setTitle(title: String): void
            + getAuthor(): String
            + setAuthor(author: String): void
            + getIsbn(): String
            + setIsbn(isbn: String): void
            + getGenre(): String
            + setGenre(genre: String): void
            + getRating(): Integer
            + setRating(rating: int): void
            + getReadingStatus(): String
            + setReadingStatus(status: String): void
        }

        class Book {
            + <<Create>> Book()
            + <<Create>> Book(title: String, author: String, isbn: String, genre: String, rating: Integer, readingStatus: String)
            + toString(): String
        }

        abstract class AbstractLibrary {
            + {abstract} addBook(book: Book): void
        }

        class Library {
        }

        Book --|> AbstractBook
        Library --|> AbstractLibrary
    }

    package command {
        interface Command <<interface>> {
            + execute(): void
            + undo(): void
        }

        class AddBookCommand {
            - library: Library
            - book: BookUpdateDTO
            + <<Create>> AddBookCommand(library: Library, book: BookUpdateDTO)
            + execute(): void
            + undo(): void
        }

        class DeleteBookCommand {
            + execute(): void
            + undo(): void
        }

        class UpdateBookCommand {
            + execute(): void
            + undo(): void
        }

        Command <|.. AddBookCommand
        Command <|.. DeleteBookCommand
        Command <|.. UpdateBookCommand
    }

    package gui {
        class LibraryGUI {
            - bookTable: JTable
            - tableModel: BookTableModel
            - addButton: JButton
            - editButton: JButton
            - deleteButton: JButton
            - searchButton: JButton
            - sortButton: JButton
            - refreshButton: JButton
            + <<Create>> LibraryGUI()
            - loadBooks(): void
            + {static} main(args: String[]): void
        }

        class BookFormDialog {
            - bookResult: BookUpdateDTO
            - titleField: JTextField
            - authorField: JTextField
            - isbnField: JTextField
            - genreField: JTextField
            - ratingSpinner: JSpinner
            - statusComboBox: JComboBox<String>
            + <<Create>> BookFormDialog(parent: JFrame)
            + <<Create>> BookFormDialog(parent: JFrame, bookToEdit: Book)
            + showDialog(): BookUpdateDTO
            - createForm(): JPanel
            - validateFields(): boolean
        }

        class BookTableModel {
            - columnNames: String[]
            - books: List<Book>
            + <<Create>> BookTableModel(books: List<Book>)
            + getRowCount(): int
            + getColumnCount(): int
            + getValueAt(rowIndex: int, columnIndex: int): Object
            + getColumnName(column: int): String
            + getBookAt(rowIndex: int): Book
            + setBooks(newBooks: List<Book>): void
            + removeBookAt(rowIndex: int): void
            + addBook(book: Book): void
            + updateBook(rowIndex: int, updatedBook: Book): void
        }
    }

    package singleton {
        class LibrarySingleton {
            - {static} instance: LibrarySingleton
            - library: Library
            - searchStrategy: SearchStrategy
            - sortStrategy: SortStrategy
            - <<Create>> LibrarySingleton()
            + {static} getInstance(): LibrarySingleton
            + getLibrary(): Library
            + loadBooksFromJson(jsonFile: File): void
            + saveBooksToJson(jsonFile: File): void
            + setSearchStrategy(searchStrategy: SearchStrategy): void
            + setSortStrategy(sortStrategy: SortStrategy): void
            + search(books: List<Book>, keyword: String): List<Book>
            + sort(books: List<Book>): List<Book>
        }
    }

    package strategy {
        interface SearchStrategy <<interface>> {
            + search(books: List<Book>, query: String): List<Book>
        }

        interface SortStrategy <<interface>> {
            + sort(books: List<Book>): List<Book>
        }

        class TitleSearchStrategy {
            + search(books: List<Book>, query: String): List<Book>
        }

        class AuthorSearchStrategy {
            + search(books: List<Book>, query: String): List<Book>
        }

        class TitleSortStrategy {
            + sort(books: List<Book>): List<Book>
        }

        class RatingSortStrategy {
            + sort(books: List<Book>): List<Book>
        }

        SearchStrategy <|.. TitleSearchStrategy
        SearchStrategy <|.. AuthorSearchStrategy
        SortStrategy <|.. TitleSortStrategy
        SortStrategy <|.. RatingSortStrategy
    }

    package DTO {
        class BookUpdateDTO {
            - title: String
            - author: String
            - isbn: String
            - genre: String
            - rating: Integer
            - readingStatus: String
            + <<Create>> BookUpdateDTO()
            + {static} builder(): Builder
            + {static} fromBook(book: Book): BookUpdateDTO
            + getTitle(): String
            + getAuthor(): String
            + getIsbn(): String
            + getGenre(): String
            + getRating(): Integer
            + getReadingStatus(): String

            class Builder {
                - dto: BookUpdateDTO
                + <<Create>> Builder()
                + title(title: String): Builder
                + author(author: String): Builder
                + isbn(isbn: String): Builder
                + genre(genre: String): Builder
                + rating(rating: Integer): Builder
                + readingStatus(status: String): Builder
                + build(): BookUpdateDTO
            }
        }
    }

    package utilities {
        class GUIController {
            - {static} gui: LibraryGUI
            + {static} initializeGUI(): void
            + {static} updateTable(): void
            + {static} showErrorMessage(message: String): void
            + {static} showSuccessMessage(message: String): void
            - <<Create>> GUIController()
        }

        class DataBaseController {
            - {static} databasePath: String
            - {static} objectMapper: ObjectMapper
            + {static} initializeDatabase(): void
            + {static} saveToDatabase(library: Library): void
            + {static} loadFromDatabase(): Library
            + {static} validateDatabaseFile(): boolean
            - <<Create>> DataBaseController()
        }
    }

    package factory {
        interface BookFactory <<interface>> {
            + createBook(): Book
        }

        class StandardBookFactory {
            + <<Create>> StandardBookFactory()
            + createBook(): Book
        }

        BookFactory <|.. StandardBookFactory
    }

    package exceptions {
        class InvalidISBNException {
            + <<Create>> InvalidISBNException()
            + <<Create>> InvalidISBNException(message: String)
            + <<Create>> InvalidISBNException(message: String, cause: Throwable)
        }

        class BookNotFoundException {
            + <<Create>> BookNotFoundException()
            + <<Create>> BookNotFoundException(message: String)
            + <<Create>> BookNotFoundException(message: String, cause: Throwable)
        }

        class InvalidRatingException {
            + <<Create>> InvalidRatingException()
            + <<Create>> InvalidRatingException(message: String)
            + <<Create>> InvalidRatingException(message: String, cause: Throwable)
        }
    }
}

@enduml
